#include "Arduino.h"
#include <ESP8266WiFi.h>
//#include <WiFiClient.h>
#include <WiFiServer.h>
//#include <WiFiUdp.h>

extern "C" {
#include "osapi.h"
#include "user_interface.h"
}

#include "AudioInput.h"
#include "sar_read_fast.h"

extern "C" {
void setup();
void loop();
}

int LED_PIN = 2;

static os_timer_t adc_timer;

//bool wifi_ap = true;
bool wifi_ap = false;

//String wc_ssid = "QW_SML_WLAN";
//String wc_password = "WirelessSml";
IPAddress wc_ip(192,168,1,35);
String wc_ssid = "Prog";
String wc_password = "skynetltd";
//IPAddress wc_ip(192,168,9,35);
IPAddress wc_gateway(0,0,0,0);
IPAddress wc_subnet(255,255,255,0);

uint16_t localUdpPort = 8001;

//WiFiUDP udp;
WiFiServer tcpServer(8000);
WiFiClient client;

PcmBuf pcmBuf;

void mainSetup();
void mainLoop();

void setup(void)
{
	//	ESP.wdtDisable();

	pinMode(LED_PIN, OUTPUT);
	digitalWrite(LED_PIN, LOW);

	Serial.begin(115200);

	delay(100);

	Serial.println(ESP.getResetReason());
	Serial.println(ESP.getResetInfo());

	if(wifi_ap == true)
	{
		Serial.print("Setting soft-AP ... ");
		WiFi.mode(WIFI_AP);
		boolean result = WiFi.softAP("MW", "wsadwsad");
		if(result == true)
			Serial.println("Ready");
		else
			Serial.println("Failed!");
	}
	else
	{
		WiFi.mode(WIFI_STA);
		WiFi.begin(wc_ssid.c_str(), wc_password.c_str());
		WiFi.config(wc_ip, wc_gateway, wc_subnet);
		while (WiFi.status() != WL_CONNECTED)
		{
			delay(1000);
			Serial.print(".");
		}

		Serial.println("");
		Serial.print("Connected to ");
		Serial.println(wc_ssid.c_str());
		Serial.print("IP address: ");
		Serial.println(WiFi.localIP());
	}

	delay(100);

	tcpServer.begin();
	//	udp.begin(localUdpPort);

	delay(100);

	mainSetup();

	digitalWrite(LED_PIN, HIGH);

	Serial.print("Free:");
	Serial.println(ESP.getFreeHeap());

	//	os_timer_func_t
}

void loop(void)
{
	//	static uint32 i = 0;
	//	Serial.print("LB ");
	//	Serial.println(i);
	//	digitalWrite(LED_PIN, HIGH);

	//	ESP.wdtFeed();
	mainLoop();

	//	digitalWrite(LED_PIN, LOW);
	//	Serial.print("LE ");
	//	Serial.println(i++);
}

static const int timerDelay = 62 * 80;

ICACHE_RAM_ATTR void timerEvent()
{
//	ets_intr_lock( );

//	wifi_set_opmode(NULL_MODE);
	system_soft_wdt_stop();
	ets_intr_lock( ); //close interrupt
	noInterrupts();

	timer0_write(ESP.getCycleCount() + timerDelay);
//  digitalWrite(LED_PIN, HIGH);

	int t0 = ESP.getCycleCount();

//	wifi_set_opmode(NULL_MODE);
	uint16 adc_addr[8];
//	uint16_t adc_num = 1;
//	uint8_t adc_clk_div = 8;
	system_adc_read_fast(adc_addr, 1, 8);
//	phy_adc_read_fast(adc_addr, 1, 8);

	pcmBuf.write(adc_addr[0]);

//	delayMicroseconds(20);
//	static int a = 0;
//	a++;
//	a = a % 1000;
//	pcmBuf.write(a);

//	delayMicroseconds(30);
	int t1 = ESP.getCycleCount();

	static uint32 i = 0;
	if(i % 16000 == 0)
	{
//		Serial.println(ESP.getFreeHeap());
//		Serial.println(i);
		Serial.println(t1 - t0);
	}
	i++;

//  digitalWrite(LED_PIN, LOW);
//	ets_intr_unlock();

	interrupts();
	ets_intr_unlock(); //open interrupt
	system_soft_wdt_restart();

}

void mainSetup()
{

	//	{
	//		timer1_isr_init();
	//		timer1_enable(TIM_DIV1, TIM_EDGE, TIM_LOOP);
	////		timer1_write(4960);
	//		timer1_write(100 * 62 * 80);
	//		timer1_attachInterrupt(timerEvent);
	//	}

	//	{
	//		timer1_isr_init();
	//		timer1_enable(3, 0, 1);
	//		//  timer1_write(268430 / 1000);
	//		//  timer1_write(39);
	//		timer1_write(39 / 2);
	//		timer1_attachInterrupt(timerEvent);
	//	}

	//	{
	//		os_timer_setfn(&adc_timer, (os_timer_func_t*) &timerEvent, 0);
	//		ets_timer_arm_new(&adc_timer, 60, 1, 0);
	//		os_timer_arm(&adc_timer, 1, 1);
	//	}

	//	{
	//		timer1_disable();
	//		ETS_FRC_TIMER1_INTR_ATTACH(NULL, NULL);
	//		ETS_FRC_TIMER1_NMI_INTR_ATTACH(timerEvent);
	//		timer1_enable(TIM_DIV1, TIM_EDGE, TIM_LOOP);
	//		timer1_write(2 * 62 * 80);
	//	}

//	{
//		noInterrupts();
//		timer0_isr_init();
//		timer0_attachInterrupt(timerEvent);
//		timer0_write(ESP.getCycleCount() + timerDelay);
//		interrupts();
//	}

	system_soft_wdt_stop();

}

void mainLoop()
{
	while(true)
	{
		delayMicroseconds(60);

		static uint32_t count = 0;
		static uint32_t lastAdcIter = 0;

		static const uint32_t ADC_TICK = 60 * 80;

		uint32_t tick = ESP.getCycleCount();

		uint32_t adcTick = tick % ADC_TICK;

		uint32_t adcIter = tick / ADC_TICK;

//		if((adcTick < 10 * 80) && (lastAdcIter != adcIter))
		{
			lastAdcIter = adcIter;
			count++;
		}

		{
			static uint32_t prevTick = 0;

			if(tick - prevTick > 80 * 1000000)
			{
				static uint32_t pc = 0;
				static uint32_t pi = 0;

				prevTick = tick;
				Serial.print(adcIter);
				Serial.print(" ");
				Serial.print(count);
				Serial.print(" ");
				Serial.print(adcIter - pi);
				Serial.print(" ");
				Serial.println(count - pc);

				pc = count;
				pi = adcIter;

			}
		}
	}

	while(true)
	{
		static uint32_t count = 0;
		static uint32_t lastAdcIter = 0;

		static const uint32_t ADC_TICK = 60 * 80;

		uint32_t tick = ESP.getCycleCount();

		uint32_t adcTick = tick % ADC_TICK;

		uint32_t adcIter = tick / ADC_TICK;

		if((adcTick < 10 * 80) && (lastAdcIter != adcIter))
		{
			lastAdcIter = adcIter;
			count++;
		}

		{
			static uint32_t prevTick = 0;

			if(tick - prevTick > 80 * 1000000)
			{
				static uint32_t pc = 0;
				static uint32_t pi = 0;

				prevTick = tick;
				Serial.print(adcIter);
				Serial.print(" ");
				Serial.print(count);
				Serial.print(" ");
				Serial.print(adcIter - pi);
				Serial.print(" ");
				Serial.println(count - pc);

				pc = count;
				pi = adcIter;

			}
		}
	}

	return;

	if(tcpServer.hasClient())
	{
		client = tcpServer.available();
		Serial.println("Connected to client");
	}

	if (client.connected() == false)
		return;

	pcmBuf.read(client, &WiFiClient::write);

	//	client.write((const uint8_t*)pcmBuf.data(), 1000);
	//	delay(100);

}

